name: Build and Release

#on:
#  push:
#    tags:
#      - '[0-9]+.[0-9]+.[0-9]+.*'

on:
  repository_dispatch: # Listen for repository_dispatch events
    types: [tag-pushed] # Or the event type you used

jobs:
  set_versions:
#    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    outputs:
      major: ${{ steps.versions.outputs.major }}
      major_minor: ${{ steps.versions.outputs.major_minor }}
      numerical: ${{ steps.versions.outputs.numerical }}
      full: ${{ steps.versions.outputs.full }}
    steps:
      - id: versions
        run: |
          tag="${{github.event.client_payload.tag}}"
          echo "full=$tag" | tee -a "$GITHUB_OUTPUT"
          numerical=$(echo "$tag" | grep -o -P '^[0-9]+\.[0-9]+\.[0-9]+')
          echo "numerical=$numerical" | tee -a "$GITHUB_OUTPUT"
          major=$(echo "$numerical" | awk -F'.' '{print $1}')
          echo "major=$major" | tee -a "$GITHUB_OUTPUT"
          major_minor=$(echo "$numerical" | awk -F'.' '{printf "%s.%s\n", $1, $2}')
          echo "major_minor=$major_minor" | tee -a "$GITHUB_OUTPUT"

  deps:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
          cache: 'pip'

      - name: Install dependencies
        run: pip install -r requirements.txt

  lint:
    continue-on-error: true
    runs-on: ubuntu-latest
    needs: deps
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: 3.12
        cache: 'pip'

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Analysing the code with pylint
      run: |
        pip install pylint
        pylint $(git ls-files '*.py')

  tests:
    runs-on: ubuntu-latest
    needs: deps
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: 3.12
        cache: 'pip'

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Run tests
      run: |
        pip install pytest pytest-cov genbadge[all]
        pytest -v --cov=. --cov-report=xml:coverage.xml --junitxml=tests.xml
        genbadge tests -i tests.xml
        genbadge coverage -i coverage.xml

  build-ubuntu:
    needs: tests
    runs-on: ubuntu-22.04
    #if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
          cache: 'pip'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Build with Nuitka
        uses: Nuitka/Nuitka-Action@v1.1
        with:
          nuitka-version: main
          script-name: main.py
          onefile: true
          standalone: true
          output-file: gitleaks-bulk
          output-dir: dist/ubuntu
          assume-yes-for-downloads: yes
          include-data-files: template*.toml=./

      - name: Upload Ubuntu Artifact
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-bulk-ubuntu
          path: dist/ubuntu/gitleaks-bulk

#  build-windows:
#    needs: lint
#    runs-on: windows-latest
#    steps:
#      - uses: actions/checkout@v3
#
#      - uses: actions/setup-python@v3
#        with:
#          python-version: '3.12'
#          cache: 'pip'
#          cache-dependency-path: |
#            **/requirements*.txt
#
#      - name: Build with Nuitka (Windows)
#        uses: Nuitka/Nuitka-Action@v1.1
#        with:
#          script-name: main.py
#          onefile: true
#          standalone: true
#          output-filename: gitleaks-bulk.exe
#          lto: yes
#          assume-yes-for-downloads: yes
#          mingw64: yes
#
#      - name: Upload Windows Artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: gitleaks-bulk-windows
#          path: build/gitleaks-bulk.exe

  test-nuitka-binary-ubuntu:
    needs: [build-ubuntu] # Depends on the binary being built
    runs-on: ${{ matrix.ubuntu-version }} # Use the matrix variable
    strategy:
      fail-fast: false # Allow all matrix jobs to finish even if one fails
      matrix:
        ubuntu-version: [ubuntu-22.04, ubuntu-24.04]
    steps:
      - name: Download Nuitka binary artifact
        uses: actions/download-artifact@v4
        with:
          name: gitleaks-bulk-ubuntu # Match the upload name from build-ubuntu
          path: . # Download to the current directory

      - name: Make binary executable
        run: chmod +x gitleaks-bulk

      - name: Test binary execution (--help) on ${{ matrix.ubuntu-version }}
        run: |
          echo "Running ./gitleaks-bulk --help on ${{ matrix.ubuntu-version }}"
          ./gitleaks-bulk --help
          echo "Binary executed successfully (exit code 0)."

  release-binaries:
    needs: [build-ubuntu, test-nuitka-binary-ubuntu, set_versions]
    #if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: gitleaks-bulk-ubuntu
          path: ./artifacts
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.set_versions.outputs.numerical }}
          files: ./artifacts/gitleaks-bulk
          fail_on_unmatched_files: true

  build-release-docker:
    needs: [ deps, tests, set_versions ]
    #if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    outputs:
      gitleaks_version: ${{ steps.gitleaks_version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # IMPORTANT for tag/branch history

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image temp
        id: build_image_temp
        uses: docker/build-push-action@v5
        with:
          context: .
          target: final
          load: true   # <<< Load image into local Docker daemon
          push: false  # <<< Do not push yet
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: temp:${{github.sha}}

      - id: gitleaks_version
        run: |
          version=$(docker run --rm -v "${PWD}":/app -w /app --entrypoint= "temp:${{github.sha}}" gitleaks version) || exit 1
          echo "version=$version" >> "$GITHUB_OUTPUT"
          echo "numerical: ${{ needs.set_versions.outputs.numerical }}"
          echo "major: ${{ needs.set_versions.outputs.major }}"
          echo "major_minor: ${{ needs.set_versions.outputs.major_minor }}"
          echo "numerical: ${{ needs.set_versions.outputs.numerical }}"

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/gitleaks-bulk
          tags: |
            # tag latest for default branch (master)
            type=raw,value=latest,enable={{is_default_branch}}
            # tag semantic versions (e.g., v1.2.3)
            type=semver,pattern={{version}},prefix=
            type=raw,value=${{ needs.set_versions.outputs.major_minor }},prefix=
            type=raw,value=${{ needs.set_versions.outputs.major }},prefix=
            type=raw,value=${{ needs.set_versions.outputs.numerical }},prefix=
            type=raw,value=${{ needs.set_versions.outputs.numerical }}-${{ steps.gitleaks_version.outputs.version }},prefix=

          labels: |
            # Standard OCI labels (recommended)
            org.opencontainers.image.title=gitleaks-bulk
            org.opencontainers.image.description=Bulk scan VCS repositories using Gitleaks
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.version=${{ steps.set_versions.outputs.numerical }}
            org.opencontainers.image.revision=${{ github.sha }}
            gitleaks.version=${{ steps.gitleaks_version.outputs.version }}
      - name: Build Docker image for publishing
        id: build_image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: final
          load: true   # <<< Load image into local Docker daemon
          push: false  # <<< Do not push yet
          tags: ${{ steps.meta.outputs.tags }} # <<< Tag the image locally
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run gitleaks rule tests inside the built image
        continue-on-error: true
        run: |
          echo "Attempting to run tests in image using primary tag..."
          # Assuming the Dockerfile copies files to /app and sets it as WORKDIR.
          # Adjust the script path if your Dockerfile uses a different location (e.g., /work).
          # We use the image ID to run the test.
          # Using the image ID ensures we test the exact image built.
          IMAGE_TO_TEST=$(docker images -q rvegter/gitleaks-bulk | head -n 1)
          echo "Testing image: $IMAGE_TO_TEST"
          cp template_gitleaks.toml gitleaks.toml
          cp template_gitleaks-custom.toml gitleaks-custom.toml
          docker run --rm -v "${PWD}":/app -w /app --entrypoint= "$IMAGE_TO_TEST" /bin/bash tests/test_gitleaks_rules.sh || exit 1
          # The script exits with non-zero on failure, which will fail this step.

      - name: Push Docker image to DockerHub
        # Only push if the previous steps succeeded, it's not a PR, and we logged in
        if: success()
        run: |
          echo "Tests passed. Pushing image with tags: ${{ steps.meta.outputs.tags }}"
          # Use docker push command to push all tags associated with the image name
          docker push --all-tags rvegter/gitleaks-bulk

      - name: Generate Supported Tags List for README
        id: generate_readme
        env:
          DOCKERFILE_PATH: "Dockerfile"
          DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          README_TEMPLATE_PATH: "README.dockerhub_template.md"
          README_OUTPUT: "README.dockerhub.md"
          VERSION_TAG_PATTERN: "^[0-9]+\\.[0-9]+\\.[0-9]+.*"
          FULL_VERSION: "${{needs.set_versions.outputs.full}}-${{ steps.gitleaks_version.outputs.version }}"
        run: |
          bash .github/scripts/readme_docker_tag_section.sh

      - name: Update Docker Hub Description
        uses: peter-evans/dockerhub-description@v4
        # Only run if the push and readme generation were successful
        if: success() # Or use always() if you want to update even on build failure
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ secrets.DOCKERHUB_USERNAME }}/gitleaks-bulk
          readme-filepath: "README.dockerhub.md"
